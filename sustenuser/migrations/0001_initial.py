# Generated by Django 4.2.10 on 2024-02-18 07:56

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=2000)),
                ('cost', models.FloatField(default=0.0)),
                ('store_id', models.CharField(blank=True, max_length=200)),
                ('item_type', models.FloatField(blank=True, max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(blank=True, max_length=100)),
                ('text', models.CharField(blank=True, max_length=2000)),
                ('isRequest', models.BooleanField(default=True)),
                ('create_time', models.BigIntegerField()),
                ('create_date', models.CharField(blank=True, max_length=100)),
                ('score', models.FloatField(default=0.0)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_username', models.CharField(blank=True, max_length=2000)),
                ('username', models.CharField(blank=True, max_length=200)),
                ('cost', models.FloatField(default=0.0)),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.IntegerField()),
                ('item_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(blank=True, max_length=100)),
                ('score', models.FloatField()),
                ('intent', models.CharField(blank=True, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_username', models.CharField(default='', max_length=200, unique=True)),
                ('name', models.CharField(blank=True, max_length=2000)),
                ('rating', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('location', models.CharField(blank=True, max_length=2000)),
                ('picture', models.CharField(blank=True, max_length=2000)),
                ('contact', models.CharField(blank=True, max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='TreeHacksUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(default='', max_length=200)),
                ('food_score', models.FloatField()),
                ('transport_score', models.FloatField()),
                ('consumption_score', models.FloatField(default=0.0)),
                ('groups', models.ManyToManyField(blank=True, related_name='susten_users_groups', related_query_name='susten_user_group', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='susten_users_permissions', related_query_name='susten_user_permission', to='auth.permission', verbose_name='user permissions')),
            ],
        ),
    ]
